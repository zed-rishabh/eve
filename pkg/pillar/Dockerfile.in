# Copyright (c) 2018 Zededa, Inc.
# SPDX-License-Identifier: Apache-2.0
ARG GOVER=1.12.4
FROM golang:${GOVER}-alpine as build
RUN apk update
RUN apk add --no-cache git gcc linux-headers libc-dev util-linux libpcap-dev make

# These three are supporting rudimentary cross-build capabilities.
# The only one supported so far is cross compiling for aarch64 on x86
ENV GOFLAGS=-mod=vendor
ENV GO111MODULE=on
ENV CGO_ENABLED=1
ARG GOARCH=
ARG CROSS_GCC=https://musl.cc/aarch64-linux-musleabi-cross.tgz
RUN [ -z "$GOARCH" ] || (cd / ; apk add --no-cache wget && wget -O - $CROSS_GCC | tar xzvf -)

ADD ./  /pillar/

# go vet/format and go install
WORKDIR /pillar
RUN [ -z "$GOARCH" ] || export CC=$(echo /*-cross/bin/*-gcc) ;\
    echo "Running go vet" && go vet ./... && \
    echo "Running go fmt" && ERR=$(gofmt -e -l -s $(find . -name \*.go | grep -v /vendor/)) && \
       if [ -n "$ERR" ] ; then echo $ERR ; exit 1 ; fi && \
    make DISTDIR=/dist build

# hadolint ignore=DL3006
FROM LISP_TAG as lisp
# hadolint ignore=DL3006
FROM XENTOOLS_TAG as xen-tools
# hadolint ignore=DL3006
FROM DNSMASQ_TAG as dnsmasq
# hadolint ignore=DL3006
FROM STRONGSWAN_TAG as strongswan
# hadolint ignore=DL3006
FROM GPTTOOLS_TAG as gpttools
# hadolint ignore=DL3006
FROM WATCHDOG_TAG as watchdog
# hadolint ignore=DL3006
FROM RKT_TAG as rkt-build
# hadolint ignore=DL3006
FROM RKT_STAGE1_TAG as rkt-stage1-build
# hadolint ignore=DL3006
FROM FSCRYPT_TAG as fscrypt-build
# hadolint ignore=DL3006
FROM UEFI_TAG as uefi-build
# hadolint ignore=DL3006
FROM RKT_COMPOSE_TAG as rkt-compose-build

FROM alpine:3.8
SHELL ["/bin/ash", "-eo", "pipefail", "-c"]

RUN apk add --no-cache \
    yajl xz bash openssl iptables ip6tables iproute2 dhcpcd \
    apk-cron coreutils dmidecode sudo libbz2 libuuid ipset \
    libaio logrotate pixman glib curl radvd perl ethtool \
    util-linux e2fsprogs libcrypto1.0 xorriso \
    python libpcap libffi jq e2fsprogs-extra keyutils

# The following is for xen-tools
RUN [ `uname -m` = "aarch64" ] && apk add --no-cache libfdt || :

# We have to make sure configs survive in some location, but they don't pollute
# the default /config (since that is expected to be an empty mount point)
ADD conf/root-certificate.pem conf/server conf/server.production /opt/zededa/examples/config/
ADD scripts/device-steps.sh \
    scripts/generate-device.sh \
    scripts/generate-self-signed.sh \
    scripts/handlezedserverconfig.sh \
    scripts/watchdog-report.sh \
  /opt/zededa/bin/
ADD conf/lisp.config.base /var/tmp/zededa/lisp.config.base

COPY patches/* /patches/
RUN set -e && for patch in ../patches/*.patch; do \
        echo "Applying $patch"; \
        patch -p1 < "$patch"; \
    done

COPY --from=build /dist /opt/zededa/bin
COPY --from=xen-tools / /
COPY --from=lisp / /
COPY --from=gpttools / /
COPY --from=dnsmasq /usr/sbin/dnsmasq /opt/zededa/bin/dnsmasq
COPY --from=strongswan / /
COPY --from=watchdog /usr/sbin /usr/sbin
COPY --from=rkt-build /go/rkt/build-rkt-1.26.0/target/bin/rkt /usr/sbin/rkt
COPY --from=rkt-compose-build /go/rkt-compose/bin/rkt-compose /usr/sbin/rkt-compose
COPY --from=rkt-stage1-build /go/stage1-xen-master/stage1-xen.aci /usr/sbin/stage1-xen.aci
COPY --from=fscrypt-build /fscrypt /opt/zededa/bin/fscrypt
COPY --from=uefi-build /OVMF.fd /usr/lib/xen/boot/ovmf.bin
COPY --from=uefi-build /OVMF_PVH.fd /usr/lib/xen/boot/ovmf-pvh.bin

# We need to keep a slim profile, which means removing things we don't need
RUN rm /usr/lib/libxen*.a /usr/lib/libxl*.a

# And now a few local tweaks
COPY rootfs/ /
# logrotate requires restricted permissions
RUN chmod 644 /etc/logrotate.d/zededa

# We will start experimenting with stripping go binaries on ARM only for now
RUN if [ "$(uname -m)" = "aarch64" ] ; then                                             \
       apk add --no-cache findutils=4.6.0-r1 binutils=2.30-r6 file=5.32-r2             ;\
       find / -type f -executable -exec file {} \; | grep 'not stripped' | cut -f1 -d: |\
       xargs strip                                                                     ;\
       apk del findutils binutils file                                                 ;\
    fi

SHELL ["/bin/sh", "-c"]

# FIXME: replace with tini+monit ASAP
WORKDIR /
CMD /init.sh
